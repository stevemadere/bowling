== Bowling Score Server

This RESTful server tracks bowling game throw information and calculates
scores.

The server accepts JSON requests and returns JSON serialized results.
Every creation of an object will result in your receipt the created object
serialized in JSON including an ID which will be used in all future
interactions involving that object.

== Critical Note*
Due to time constraints and a lack of requirements on the topic,
there is no user authenication or access controll at all.  Obviously,
I would never release an actually usable system like that. I'd estimate
about a day's effort to fix that with devise.

== Game Setup

To create a Game, POST to the route "/games".  No required parameters.

To create a Player, POST to the route "/players" with params:
  * name

Henceforth in this document, an all-caps route component is meant to be a substitutable parameter.  e.g.: GAME_ID should be replaced with the id returned in the serialized Game object.

To add a Player to an existing Game, GET the route "/games/GAME_ID/players/PLAYER_ID/add"

Alternatively, you can create and add a Player to a Game at the same time
by using POST to "/games/GAME_ID/players" with the same params as provided
when creating an unassigned Player.

== Recording Throws

To record a roll after adding a Player to a Game, PUT to the route "/games/GAME_ID/players/PLAYER_ID/game_frames/frame_number" with params:
  * roll_number (1-2) for frames 1-9, (1-3) for frame 10
  * pins_toppled (0-10) for rolls 1 or 3 , (0-remaining_pins) for roll2

GameFrames can be recorded out of order but game score will only include
the sequence of continuously complete frames starting from frame 1.

== Retrieving scores

To retrieve info on a specific frame, GET the route "/games/GAME_ID/players/PLAYER_ID/game_frames/FRAME_NUMBER"

The resulting serialized frame will include a score member which will
have a value of null if the frame cannot yet be scored.  (if it is incomplete or
it is a strike or spare and the following throws are not yet known)

To retrieve info on all game_frames for a single Player in a Game, GET the route
"/games/GAME_ID/players/PLAYER_ID/game_frames"

To retrieve the current scores of all players in a game, GET the route
"/games/GAME_ID/players".  The resulting object will include the (admittedly
denormalized) information in a list of structures containing members 
  * name
  * player_id
  * current_score (includes only scorable frames)
  * final_score (NULL until game is complete, then equals current_score)

== Architecture

Games, Players, and GameFrames are each distinct classes
and instances of them are stored in separate RDB tables.

Players are associated with a Game through an association
class called PlayerGame, also stored in a separate RDB table.
Each instance of PlayerGame references one Game and one Player and thus 
player_games is a join table between players and games.

A set of up to 10 GameFrames are associated with a PlayerGame via a
has_many relationship  (GameFrame references PlayerGame)

This diagram shows the ownership relationships somewhat more graphically:

 |-- Game 
 |   `-- PlayerGame =>(belongs_to) Player
 |       `--  GameFrame

The GameFrame class contains roll1, roll2, and roll3 directly rather
than storing them in a separate table with a has_many relationship because
that level of normalization would have massivley complicated the logic
with no real benefit.  Validation rules for roll2 and roll3 are tightly
coupled with the value of roll1 and the rules are distinct for each roll
so there was no benefit to storing all rolls as similar entities.  Meanwhile,
all of the code necessary to distinguish them would have added significant
code complexity and the extra table join would have reduced access
efficiency.  Even if one wanted to calculate statistics on large numbers of
rolls, it makes little sense to aggregate a collection of roll1s with
roll2s since they have different starting states.
No benefits, lots of costs, seems like a no-brainer.

Rails conventions are conspicously followed in this design to ease
the reader's understanding.

The primary testing framework used is rspec with rspec-given syntax.


=== Routes Reference

Following is the exhaustive list of allowed routes spewed by the 'rake routes' command:


 |                     players GET    /players(.:format)                                                players#index
 |                            POST   /players(.:format)                                                players#create
 |                 new_player GET    /players/new(.:format)                                            players#new
 |                edit_player GET    /players/:id/edit(.:format)                                       players#edit
 |                     player GET    /players/:id(.:format)                                            players#show
 |                            PUT    /players/:id(.:format)                                            players#update
 |                            DELETE /players/:id(.:format)                                            players#destroy
 |            add_game_player GET    /games/:game_id/players/:id/add(.:format)                         players#add
 |    game_player_game_frames GET    /games/:game_id/players/:player_id/game_frames(.:format)          game_frames#index
 |                            POST   /games/:game_id/players/:player_id/game_frames(.:format)          game_frames#create
 | new_game_player_game_frame GET    /games/:game_id/players/:player_id/game_frames/new(.:format)      game_frames#new
 |edit_game_player_game_frame GET    /games/:game_id/players/:player_id/game_frames/:id/edit(.:format) game_frames#edit
 |     game_player_game_frame GET    /games/:game_id/players/:player_id/game_frames/:id(.:format)      game_frames#show
 |                            PUT    /games/:game_id/players/:player_id/game_frames/:id(.:format)      game_frames#update
 |                            DELETE /games/:game_id/players/:player_id/game_frames/:id(.:format)      game_frames#destroy
 |               game_players GET    /games/:game_id/players(.:format)                                 players#index
 |                            POST   /games/:game_id/players(.:format)                                 players#create
 |            new_game_player GET    /games/:game_id/players/new(.:format)                             players#new
 |           edit_game_player GET    /games/:game_id/players/:id/edit(.:format)                        players#edit
 |                game_player GET    /games/:game_id/players/:id(.:format)                             players#show
 |                            PUT    /games/:game_id/players/:id(.:format)                             players#update
 |                            DELETE /games/:game_id/players/:id(.:format)                             players#destroy
 |                      games GET    /games(.:format)                                                  games#index
 |                            POST   /games(.:format)                                                  games#create
 |                   new_game GET    /games/new(.:format)                                              games#new
 |                  edit_game GET    /games/:id/edit(.:format)                                         games#edit
 |                       game GET    /games/:id(.:format)                                              games#show
 |                            PUT    /games/:id(.:format)                                              games#update
 |                            DELETE /games/:id(.:format)                                              games#destroy
